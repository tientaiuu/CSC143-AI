import pygame
import sys

# Define constants
WIDTH, HEIGHT = 800, 600
GRID_SIZE = 40  # Size of each grid cell
ROWS = HEIGHT // GRID_SIZE
COLS = WIDTH // GRID_SIZE

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Example maze layout (using characters to represent elements)
MAZE_LAYOUT = [
    "##########",
    "#        #",
    "#  $ $   #",
    "# . @ .  #",
    "##########"
]

# Pygame Initialization
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Maze Layout")

def draw_maze(layout):
    for row in range(len(layout)):
        for col in range(len(layout[row])):
            char = layout[row][col]
            if char == '#':
                pygame.draw.rect(screen, BLACK, (col * GRID_SIZE, row * GRID_SIZE, GRID_SIZE, GRID_SIZE))
            elif char == ' ':
                pygame.draw.rect(screen, WHITE, (col * GRID_SIZE, row * GRID_SIZE, GRID_SIZE, GRID_SIZE))
            elif char == '$':
                pygame.draw.rect(screen, GRAY, (col * GRID_SIZE, row * GRID_SIZE, GRID_SIZE, GRID_SIZE))
            elif char == '.':
                pygame.draw.circle(screen, GREEN, (col * GRID_SIZE + GRID_SIZE // 2, row * GRID_SIZE + GRID_SIZE // 2), GRID_SIZE // 4)
            elif char == '@':
                pygame.draw.circle(screen, BLUE, (col * GRID_SIZE + GRID_SIZE // 2, row * GRID_SIZE + GRID_SIZE // 2), GRID_SIZE // 4)
            elif char == '*':
                pygame.draw.circle(screen, RED, (col * GRID_SIZE + GRID_SIZE // 2, row * GRID_SIZE + GRID_SIZE // 2), GRID_SIZE // 4)

def main():
    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        screen.fill(WHITE)  # Clear the screen
        draw_maze(MAZE_LAYOUT)  # Draw the maze layout
        pygame.display.flip()  # Update the display
        clock.tick(60)  # Limit frames per second

if __name__ == "__main__":
    main()
